.EXPORT_ALL_VARIABLES:

LOG_LEVEL ?= false

NPM=/Users/mdecorte/Documents/Development/Lambda/thirdSource/node_modules/.bin

# force cli to load ~/.aws/config
# https://github.com/aws/aws-sdk-js/issues/1921
AWS_SDK_LOAD_CONFIG=1 

JESTFLAGS=--passWithNoTests --no-color --coverage --bail --verbose
############################################################
#
.PHONY: $(SUBPACKAGES)
.PHONY: .do_not_run

############################################################
#
.PHONY: all
.PHONY: .all

.all: unit environment package install integration

############################################################
#
.PHONY: init
.PHONY: .init
.PHONY: .clean.init
.PHONY: .veryclean.init

.init:
ifeq ($(PACKAGE),)
	$(call recursiveMake,init)
else
	$(printHeader)
	@if [ ! -f .npmignore -a -f ../.npmignore ] ; then ln -s ../.npmignore .; fi
	@if [ ! -f .gitignore -a -f ../.gitignore ] ; then ln -s ../.gitignore .; fi
endif

.clean.init:

.veryclean.init:
	rm -rf node_modules

############################################################
# Unit Tests
.PHONY: unit
.PHONY: lint
.PHONY: .lint
.PHONY: .clean.lint
.PHONY: .veryclean.lint

lint: .lint
.lint: .unit.lint
.unit.lint: 
.unit.lint: $(SRC)
.unit.lint: $(UNITTESTSRC) 
.unit.lint: $(INTTESTSRC) 
.unit.lint: 
ifeq ($(PACKAGE),)
	$(call recursiveMake,.unit.lint)
else
	$(printHeader)
	$(NPM)/eslint src/*.js test/*.js
	touch .unit.lint
endif

.unit: .unit.lint
.unit: .unit.test
.unit.test: $(SRC)
.unit.test: $(UNITTESTSRC) 
.unit.test: .unit.lint
.unit.test: 
ifeq ($(PACKAGE),)
	$(call recursiveMake,.unit.test)
else
	$(call jestCommand,unit)
	touch .unit.test
endif

sonar:
	echo ==== sonarqube && sonar-scanner -Dproject.settings=$$HOME/.sonar/sonar-project.properties  $$(cat sonar.properties) 

.clean.unit:
	rm -f .unit.lint
	rm -f .unit.test

.veryclean.unit:

############################################################
# Package
.PHONY: package
.PHONY: .package.recurse
.PHONY: .clean.package
.PHONY: .veryclean.package


$(PACKAGE): .unit.lint
$(PACKAGE): .unit.test

ifeq ($(SUBPACKAGES),)
DOTPACKAGEFILES = 
else
DOTPACKAGEFILES = $(shell find . -name .package.file -print)
endif

.package: $(PACKAGE)
.package: $(DOTPACKAGEFILES)
.package:
ifeq ($(PACKAGE),)
	$(call recursiveMake,package)
endif

.clean.package:
	rm -f $(PACKAGE)
	rm -f .package.file
	rm -f $(basename $(PACKAGE)).tgz

.veryclean.package:

define jsToZip 
	$(NPM)/bundle-deps
	npm pack
	@ZIPFILE=$(strip $(1));\
	TGZFILE=$(basename $(1)).tgz; \
	SDIR=`pwd`;\
	TDIR=/tmp/$$$$.npmpackage;\
	mkdir $$TDIR; \
	cd $$TDIR;	\
	tar xf $$SDIR/$$TGZFILE;	\
	cd package; 	\
	if [ -d node_modules ] ; \
	then \
		find node_modules -name '*.md' -exec rm {} \; ;\
	fi;\
	zip --recurse-path --quiet ../$$ZIPFILE .;	\
	cd $$SDIR; \
	mv $$TDIR/$$ZIPFILE . ;\
	rm -rf $$TDIR;
	touch .package.file
endef

############################################################
# Environment
.PHONY: environment
.PHONY: .environment
.PHONY: .clean.environment
.PHONY: .veryclean.environment

.environment: .unit.lint
.environment: .unit.test
.environment: .package
.environment:
	@$(MAKE) terraform.tfstate

terraform.tfstate: $(DOTPACKAGEFILES)
terraform.tfstate: $(TFSOURCE)
terraform.tfstate:
	$(printHeader)
	terraform apply -auto-approve
	touch .environment.terraform

.clean.environment:
	rm -f .environment.terraform

.veryclean.environment:  
	$(printHeader)
	terraform destroy    

#############################################################
# Install
.PHONY: install
.PHONY: .install
.PHONY: .clean.install
.PHONY: .veryclean.install

.install: .environment

.clean.install:

############################################################
# Integration Tests
.PHONY: integration
.PHONY: .integration
.PHONY: .clean.integration

.integration: .integration.api
.integration: .integration.uri

.integration.api: $(SRC)
.integration.api: $(INTTESTSRC) 
.integration.api: .unit.lint
.integration.api: .unit.test
.integration.api: package
.integration.api:
ifeq ($(PACKAGE),)
	$(call recursiveMake,.integration.api)
else
	$(printHeader)
	$(call jestCommand,api)
	touch .integration.api
endif

##########
.integration.uri: $(SRC)
.integration.uri: $(INTTESTSRC)
.integration.uri: .unit.lint
.integration.uri: .unit.test
.integration.uri: package
.integration.uri: .integration.api
.integration.uri:
ifeq ($(PACKAGE),)
	$(call recursiveMake,.integration.uri)
else
	$(printHeader)
	$(call jestCommand,uri)
	touch .integration.uri
endif

.clean.integration:
	rm -f .integration.api
	rm -f .integration.uri

.veryclean.integration:

############################################################
.PHONY: test
.PHONY: .test

.test: .unit .integration

##############################
.PHONY: clean
.PHONY: .clean
.PHONY: veryclean
.PHONY: .veryclean

.clean: .clean.unit
.clean: .clean.package
.clean: .clean.environment 
.clean: .clean.install
.clean: .clean.integration
.clean: .clean.general
.clean:
	$(printHeader)
	$(call recursiveMake,clean)

.veryclean: .veryclean.environment
.veryclean: .veryclean.unit
.veryclean: .veryclean.package
.veryclean: .veryclean.install
.veryclean: .veryclean.integration
.veryclean:
	$(printHeader)
	$(call recursiveMake,veryclean)

.clean.general:
	rm -f *~ */*~


############################################################
define recursiveMake
	@ set -e ; \
	for d in $(SUBPACKAGES)    ;\
	do \
		echo ===== make -C $$d $(1);\
		$(MAKE) -C $$d $(1) ;\
	done
endef

############################################################
define jestCommand
    @if ( cd test ; ls | grep -n "$(1)");  	\
    then                                			\
		$(NPM)/jest "$(1)" $(JESTFLAGS);  			\
    fi
endef

############################################################
define printerHeader
	@echo ========== $$(basename $$(pwd))  $@ ==========
endef    
