.EXPORT_ALL_VARIABLES:

LOG_LEVEL ?= error

NPM=/Users/mdecorte/Documents/Development/Lambda/thirdSource/node_modules/.bin

# force cli to load ~/.aws/config
# https://github.com/aws/aws-sdk-js/issues/1921
AWS_SDK_LOAD_CONFIG=1 

JESTFLAGS=--passWithNoTests --no-color --coverage --bail --verbose
############################################################
#
.PHONY: $(SUBPACKAGES)
.PHONY: .do_not_run

############################################################
#
.PHONY: all
.PHONY: .all

.all: .unit .environment .package .install .integration

############################################################
#
.PHONY: init
.PHONY: .init
.PHONY: .clean.init
.PHONY: .veryclean.init

.init:
ifeq ($(PACKAGE),)
	$(recursiveCommand)
else
	$(header)
	@if [ ! -f .npmignore -a -f ../.npmignore ] ; then ln -s ../.npmignore .; fi
	@if [ ! -f .gitignore -a -f ../.gitignore ] ; then ln -s ../.gitignore .; fi
endif

.clean.init:

.veryclean.init:
	rm -rf node_modules

############################################################
# Unit Tests
.PHONY: unit
.PHONY: lint
.PHONY: .lint
.PHONY: .clean.lint
.PHONY: .veryclean.lint

lint: .lint
.lint: .unit.lint
.unit.lint: 
.unit.lint: $(SRC)
.unit.lint: $(UNITTESTSRC) 
.unit.lint: $(INTTESTSRC) 
.unit.lint: 
ifeq ($(PACKAGE),)
	$(recursiveCommand)
else
	$(header)
	$(NPM)/eslint src/*.js test/*.js
	touch .unit.lint
endif

.unit: .unit.lint
.unit: .unit.test
.unit.test: $(SRC)
.unit.test: $(UNITTESTSRC) 
.unit.test: .unit.lint
.unit.test: 
ifeq ($(PACKAGE),)
	$(recursiveCommand)
else
	$(NPM)/jest unit $(JESTFLAGS)
	touch .unit.test
endif

sonar:
	echo ==== sonarqube && sonar-scanner -Dproject.settings=$$HOME/.sonar/sonar-project.properties  $$(cat sonar.properties) 

.clean.unit:
	rm -f .unit.lint
	rm -f .unit.test

.veryclean.unit:

############################################################
# Package
.PHONY: package
.PHONY: .clean.package
.PHONY: .veryclean.package

$(PACKAGE):: .unit.lint
$(PACKAGE):: .unit.test
.package: $(PACKAGE)
.package:
ifeq ($(PACKAGE),)
	$(recursiveCommand)
else
	touch .package
endif

DOTPACKAGES=$(patsubst %,%/.package,$(SUBPACKAGES))

$(DOTPACKAGES):
		echo make -C party .package;\
		$(MAKE) -C party  .package;

.clean.package:
	rm -f $(PACKAGE)
	rm -f .package
	rm -f $(basename $(PACKAGE)).tgz

.veryclean.package:

define jsToZip 
	$(NPM)/bundle-deps
	npm pack
	@ZIPFILE=$(strip $(1));\
	TGZFILE=$(basename $(1)).tgz; \
	SDIR=`pwd`;\
	TDIR=/tmp/$$$$.npmpackage;\
	mkdir $$TDIR; \
	cd $$TDIR;	\
	tar xf $$SDIR/$$TGZFILE;	\
	cd package; 	\
	if [ -d node_modules ] ; \
	then \
		find node_modules -name '*.md' -exec rm {} \; ;\
	fi;\
	zip --recurse-path --quiet ../$$ZIPFILE .;	\
	cd $$SDIR; \
	mv $$TDIR/$$ZIPFILE . ;\
	rm -rf $$TDIR;
endef

############################################################
# Environment
.PHONY: environment
.PHONY: .environment
.PHONY: .clean.environment
.PHONY: .veryclean.environment

.environment: .unit.lint
.environment: .unit.test
.environment: .package
.environment: terraform.tfstate

terraform.tfstate: $(DOTPACKAGES)
terraform.tfstate: $(TFSOURCE)
terraform.tfstate:
	$(header)
	terraform apply -auto-approve
	touch .environment.terraform

.clean.environment:
	rm -f .environment.terraform

.veryclean.environment:  
	$(header)
	terraform destroy    

#############################################################
# Install
.PHONY: install
.PHONY: .install
.PHONY: .clean.install
.PHONY: .veryclean.install

.install: .environment

.clean.install:

############################################################
# Integration Tests
.PHONY: integration
.PHONY: .integration
.PHONY: .clean.integration

.integration: .integration.aws
.integration: .integration.service

.integration.aws: $(SRC)
.integration.aws: $(INTTESTSRC) 
.integration.aws: .unit.lint
.integration.aws: .unit.test
.integration.aws: .package
.integration.aws:
ifeq ($(PACKAGE),)
	$(recursiveCommand)
else
	$(header)
	$(NPM)/jest aws $(JESTFLAGS)
	touch .integration.aws
endif

##########
.integration.service: $(SRC)
.integration.service: $(INTTESTSRC)
.integration.service: .unit.lint
.integration.service: .unit.test
.integration.service: .package
.integration.service: .integration.aws
.integration.service:
ifeq ($(PACKAGE),)
	$(recursiveCommand)
else
	$(header)
	$(NPM)/jest service $(JESTFLAGS)
	touch .integration.service
endif

.clean.integration:
	rm -f .integration.aws
	rm -f .integration.service

.veryclean.integration:

############################################################
.PHONY: test
.PHONY: .test

.test: .unit .integration

##############################
.PHONY: clean
.PHONY: .clean
.PHONY: veryclean
.PHONY: .veryclean

.clean: .clean.unit
.clean: .clean.package
.clean: .clean.environment 
.clean: .clean.install
.clean: .clean.integration
.clean:
	$(header)
	$(recursiveCommand)

.veryclean: .veryclean.environment
.veryclean: .veryclean.unit
.veryclean: .veryclean.package
.veryclean: .veryclean.install
.veryclean: .veryclean.integration
.veryclean:
	$(header)
	$(recursiveCommand)


############################################################
define recursiveCommand
	@ set -e ; \
	for d in $(SUBPACKAGES)    ;\
	do \
		echo make -C $$d $@;\
		$(MAKE) -C $$d $@ ;\
	done
endef

define header
	@echo ========== $$(basename $$(pwd))  $@ ==========
endef    